//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.nlp.services;

use com.ibm.streamsx.nlp::*;
use com.ibm.streamsx.topology.topic::Subscribe;
use com.ibm.streamsx.topology.topic::Publish;
use com.ibm.streamsx.json::*;
use com.ibm.streamsx.topology::String;


/**
 * Microservice that processes UIMA PEAR file
 * 
 * **Subscribed topics**
 *
 * This microservice subscribes to the following topics.
 *
 * * `streamsx/nlp/documents` - ingest topic of type String
 * * `streamsx/nlp/update/pear` - update pear topic of type String.
 *    String contains the filename of the pear file location.
 *
 * **Published topics**
 * 
 * * `streamsx/nlp/annotations` - resulting annotations. Each tuple
 *    represents a processed document. Output is of type Json.
 *    CAS output is transformed to JSON and format depends on PEAR.
 *
 * * `streamsx/nlp/errors` - Document processing errors
 *    errorsTopic: export JSON Schema
 *    \{
 *       "string" : string (document causing the error)
 *       "errors" : string list
 *    \}
 */
public composite UimaService
{
	param
		expression<rstring> $ingestTopic : getSubmissionTimeValue("ingestTopic", "streamsx/nlp/documents");
		expression<rstring> $updatePearTopic : getSubmissionTimeValue("updatePearTopic", "streamsx/nlp/update/pear");
		expression<rstring> $annotationsTopic : getSubmissionTimeValue("annotationsTopic", "streamsx/nlp/annotations");
		expression<rstring> $errorTopic : getSubmissionTimeValue("errorsTopic", "streamsx/nlp/errors");
		
	graph
		/**
		 * The Subscribe imports the documents
		 */
		stream<com.ibm.streamsx.topology::String> SubscribeStringDocuments = Subscribe() {
			param
				topic: $ingestTopic;
				streamType: com.ibm.streamsx.topology::String;
		}
		
		/**
		 * The Subscribe imports the pear file name to update the pear file
		 */
		stream<com.ibm.streamsx.topology::String> SubscribePearFilenames = Subscribe() {
			param
				topic: $updatePearTopic;
				streamType: com.ibm.streamsx.topology::String;
		}

		(stream<rstring filename> ControlStream as C ) as CtrlGen = Custom(SubscribePearFilenames as I) {
			logic
			onTuple I: {
				if (string == "") {
					appTrc (Trace.error, "Empty filename.", "nlp");
				}
				else {
					submit({filename=I.string}, C);
					submit(Sys.WindowMarker, C); // activate new PEAR
				}
			}
		}

		(stream<Json> TextAnnotated;
		stream<rstring string, list<rstring> errors> ErrorStream) as UimaTextProcessor = UimaText(SubscribeStringDocuments; ControlStream){
			param
				inputDoc: "string";
				pearFile: getThisToolkitDir()+ "/" + "etc/uima_service.pear"; // DateTimeAnnotator
				casOut: "jsonString";
				casJson: true;
				errorsAttribute: "errors";
		}

		/**
		 * The Publish publishes the annotations messsages to the user-defined topic (default: 'streamsx/nlp/annotations').
		 */
		() as PublishAnnotations = Publish(TextAnnotated) {
			param
				 topic: $annotationsTopic;
		}

		/** The TupleToJSON converts the error message into JSON to prepare it for publishing.		
		*/
		stream<Json> JsonErrorMessage = TupleToJSON(ErrorStream) {
		}

		/**
		 * The Publish publishes the error messsages to the user-defined topic (default: 'streamsx/nlp/errors').
		 */
		() as PublishErrors = Publish(JsonErrorMessage) {
			param
				 topic: $errorTopic;
		}

}



