/*
** Copyright (C) 2016  International Business Machines Corporation
** All Rights Reserved
*/
use com.ibm.streamsx.nlp::*;

composite RutaTextCloudSample {
	param
		expression<int32>   $loop: (int32)getSubmissionTimeValue("loop", "-1"); // infinite loop = -1

	type
		AnnoSpan = tuple<rstring text, int32 begin, int32 end>;

	graph

		
		stream<rstring file> DocumentFilenames as O = Custom() {
			logic state: {
				mutable int32 loop_ = $loop;
			}
			onProcess: {
				mutable rstring filename = "";
				if (loop_ >= 0) {
					if (loop_ > 0) {
						for (int32 l in range(loop_)) {
							if (l==0) {}
							for (int32 iter in range(51)) {
								filename = getThisToolkitDir()+"/opt/"+"SenseAndSensibility/chapter" +(rstring)(iter) + ".txt";
								submit({file=filename}, O);
							}
						}
					}
				}
				else {
					while (true) {
						for (int32 iter in range(51)) {
							filename = getThisToolkitDir()+"/opt/"+"SenseAndSensibility/chapter" +(rstring)(iter) + ".txt";
							submit({file=filename}, O);
						}
					}
				}
			}
		}

		stream<rstring oneline> Lines = FileSource(DocumentFilenames) {
			param
				format : line;
		}
		
		stream<rstring entireDoc> Documents as O = Custom(Lines as I) {
			logic state: {
				mutable rstring soFar = "";
			}
			onTuple I: {
				soFar +=(rstring) "\n" + I.oneline;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					submit({entireDoc = soFar}, O);
					soFar =(rstring) "";
					submit(currentPunct(), O);
				}
				else {
					// it's a final punctuation, so send it on.
					submit(currentPunct(), O);
				}
			}
		}

		stream<list<AnnoSpan> annotations> TextAnnotated = RutaText(Documents as I) {
			param
				inputDoc: "entireDoc"; // text to analyze
				pearFile: "getNames2.pear"; // relative to etc dir
				outputAttributes: "annotations";
				outputTypes: "uima.ruta.getNames2.Main.TitleAndName"; // filter type descriptions
		}
		
		/**
		 * This is a simple helper to print the results to the console.
		 * In the Streaming Analytics service, go to the Log Viewer and Click on the PE's Console Log to view output
		 */
		() as OutputPrinter = Custom(TextAnnotated as I){
			logic
				onTuple I : {
					if (spl.collection::size(I.annotations) > 0) {
						printStringLn((rstring)I);
					}
				}
		}

}
